@startuml
note top of Client : /*Client can access both StateController & IState*/\n IState initialState = new ConcreteState1()\n StateController stateController = new StateController(initialState)\n stateController.behavior1()
class Client #violet
Client o-> StateController
Client o-> ConcreteState1
Client o-> ConcreteState2
note top of StateController : Example TrafficPost, behavior1()=which position/light to enable
class StateController{
    - state: IState
    + StateController(state)
    + behavior1()
    + behavior2()
    - default changeState() //Method to support state transition.\nIf each state decides what is next state\nEven Traffic police can use this if any VIP treatment needed for eaxmple for a CM
}
interface IState{
    + setStateController(stateController : StateController)
    + behavior1()
    + behavior2()
}
StateController o-> IState
ConcreteState1 o-> StateController
ConcreteState2 o-> StateController
note top of ConcreteState1 : behavior1(){\n //Do Something\n this.stateController.changeState(new ConcreteState2())\n}
class ConcreteState1 implements IState{
    - stateController : StateController
    + setStateController(stateController : StateController)
    + behavior1()
    + behavior2()
}
note top of ConcreteState2: stateController field is required iff each state wants to tell controller that what is the new state
class ConcreteState2 implements IState{
    - stateController : StateController
    + setStateController(stateController : StateController)
    + behavior1()
    + behavior2()
}
@enduml
